'use client'

import { ChangeEvent, FC, useEffect, useState } from 'react'
import Image from 'next/image'
import {
  ArrowUpCircle,
  CheckCircle,
  FileUp,
  FileVideo,
  Loader,
  Loader2,
  Upload,
} from 'lucide-react'
import cn from 'classnames'

import styles from './Upload-video.module.scss'
import { useUploadVideo } from './use-upload-video'
import { IUploadVideo } from './Upload-video.interface'

export const UploadVideo: FC<IUploadVideo> = ({
  handleCloseModal,
  isOpen,
  videoId,
}) => {
  const { form, media, status } = useUploadVideo({
    handleCloseModal,
    videoId,
  })

  useEffect(() => {
    if (!isOpen) status.setIsChosen(false)
  }, [])

  return (
    <div className={cn(styles.step, styles.active)}>
      {!status.isChosen ? (
        <div
          onClick={(event) => event.stopPropagation()}
          className={cn(styles.upload_video, {})}
        >
          <h2>
            <FileVideo size={28} />
            <span>–ó–∞–≥—Ä—É–∑–∏ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ üëá</span>
          </h2>

          <input onChange={media.uploadFile} type="file" accept="video/*" />
        </div>
      ) : (
        <form
          onSubmit={form.handleSubmit(form.onSubmit)}
          onClick={(event) => event.stopPropagation()}
          className={styles.upload_content}
        >
          <div className={styles.left_content}>
            <input
              {...form.register('title')}
              className={styles.title_input}
              type="text"
              name="title"
              placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ"
            />
            <textarea
              {...form.register('description')}
              className={styles.description_input}
              name="description"
              rows={8}
              placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ"
            ></textarea>
            <input
              {...form.register('preview')}
              onChange={media.changePreview}
              className={styles.preview_input}
              type="file"
              name="preview"
              accept="image/png, image/jpg, image/jpeg"
            />
            <div className={styles.is_public}>
              <div
                onClick={() => status.setIsPublic((prev) => !prev)}
                className={cn(styles.button_wrapper, {
                  [styles.public]: status.isPublic,
                })}
                title="–ü—É–±–ª–∏—á–Ω–æ–µ –≤–∏–¥–µ–æ"
              >
                <div className={styles.button}></div>
              </div>
              <h4>–ü—É–±–ª–∏—á–Ω–æ–µ –≤–∏–¥–µ–æ</h4>
            </div>
            <div className={styles.loading_process}>
              {status.isUploaded ? (
                <CheckCircle color="#ff7551" />
              ) : (
                <Upload color="#ff7551" className="animate-bounce" />
              )}
              <span>
                {status.isUploaded
                  ? '–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ'
                  : `–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ ${status.progressPercent}%`}
              </span>
            </div>
          </div>
          <div className={styles.right_content}>
            {media.previewPath ? (
              <Image
                className={styles.preview_image}
                src={media.previewPath}
                width={400}
                height={225}
                alt="–ü—Ä–µ–≤—å—é –≤–∏–¥–µ–æ"
              />
            ) : (
              <div className={styles.preview_mock}>
                –¢—ã –¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–≤—å—é
              </div>
            )}
            {media.videoFileName && (
              <div className={styles.file_info}>
                <span>–ò–º—è —Ñ–∞–π–ª–∞</span>
                <h5>{media.videoFileName}</h5>
              </div>
            )}
            <button className={styles.button_save} title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å">
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
          </div>
        </form>
      )}
    </div>
  )
}
